from fileinput import filename
import os
from os import path
from os import walk
import pandas as pd
import os
import re
from collections import Counter
import glob
import re
from per_names import per_names
from intent_names import intent_names


# Permissions
def __extract_manifest_from_apk(file):
    print("Entered __")
    print(f'{file.filename}')
    os.system('rm -rf ./temp/ext/')
    print('\n\n')
    print(f"apktool d ./apks/{file.filename} -o temp/ext/")
    print('\n\n')
    os.system(f"apktool d ./apks/{file.filename} -o temp/ext/")

    path_wdir = os.getcwd() + "/"
    print("cp " + path_wdir + "temp/ext/AndroidManifest.xml " + path_wdir + "output/" + file.filename + ".xml")
    os.system("cp " + path_wdir + "temp/ext/AndroidManifest.xml " + path_wdir + "output/" + file.filename + ".xml")
    os.system('rm -rf temp/ext/')


"""Function to build a Counter of specified words in fileobj"""
def word_frequency(file, perm_words):
    lines = re.split('\n',file)
    lines = [line.lstrip() for line in lines]
    temp = {}
    for word in perm_words:
        temp[word] = 0
    for line in lines:
        if line.startswith("<uses-permission") or line.startswith("<uses-permission-sdk-23") or line.startswith("<permission"):
            words = re.split('\s|<|>|"', line)
            for word in words:
                if word in perm_words:
                    temp[word] = 1
    return temp


def __extract_permissions_from_xml(file):
    path_wdir = os.getcwd() + "/"
    path_apks_folder = path_wdir + 'output/' #Folder containing saved apks

    file_name = file.filename + ".xml"
    file_path = "./output/" + file_name

    # Extracting Permissions for Malware APKs
    d = {}
    with open(file_path) as f:
        d[file_name] = word_frequency(f.read(), per_names)
    
    dataframe = pd.DataFrame(d).transpose()
    permissions_list = list(dataframe.iloc[:, :].values)[0]
    print(len(permissions_list))
    return permissions_list

def __delete_files(file):
    os.system(f"rm ./apks/{file.filename}")
    os.system(f"rm ./output/{file.filename}.xml")
    print("All temp files deleted")



# Intent
"""Function to build a Counter of specified words in fileobj"""
def word_frequency(file, perm_words):
    words = re.split('\s|<|>|"', file)
    temp = {}
    for word in perm_words:
        temp[word] = 0
    for word in words:
        if word in perm_words:
            print(word)
            temp[word] += 1
    return temp

def __extract_intent_from_xml(file):
    path_wdir = os.getcwd() + '/'
    path_to_manifest = path_wdir + 'output/'

    file_name = file.filename + ".xml"
    file_path = "./output/" + file_name

    d = {}
    with open(file_path) as f:
        d[file_name] = word_frequency(f.read(), intent_names)

    dataframe = pd.DataFrame(d).transpose()
    intents = list(dataframe.iloc[:, :].values)[0]
    return intents




def extract_manifest(file):
    if(file.filename != ''):
        file.save(f'./apks/{file.filename}')
    else:
        return

    __extract_manifest_from_apk(file)

    permissions_list = __extract_permissions_from_xml(file)
    intent_list = __extract_intent_from_xml(file)

    __delete_files(file)

    print(intent_list)
    return permissions_list, intent_list


    

